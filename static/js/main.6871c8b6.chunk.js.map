{"version":3,"sources":["card.js","mode_selector.js","entry.js","load_dialog.js","card_detail.js","index.js"],"names":["Card","hanzi","pinyin","tone","this","ModeSelector","mode","card","Entry","LoadDialog","props","cardList","entryList","className","onLoad","cards","entries","onClick","loadData","verifyAndLoad","ImportFromFileBodyComponent","fileReader","handleFileRead","e","lines","result","split","checkForUniqueHanzi","Set","line","length","fields","replace","push","hanziList","i","require","sylables","toneToNumberOnly","has","console","log","add","type","id","accept","onChange","file","target","files","FileReader","onloadend","readAsText","CardDetail","enumerationList","cardEntries","forEach","entry","key","toHighlight","questionCard","hanziSegments","joinedSegments","segment","pop","highlightHanzi","produceList","Tile","value","Board","getAnswerField","answers","renderTile","React","Component","GameStatus","style","background","status","Game","state","isGame","isRunning","showGameStatus","showDetails","answerCorrect","Array","fill","question","player","Mode","setState","a","j","Math","floor","random","shuffle","slice","getQuestionField","evaluateAnswer","getEntriesAssociatedWithCard","setUpNewRound","updateEntryData","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6871c8b6.chunk.js","sourcesContent":["export default class Card {\n    constructor(hanzi, pinyin, tone) {\n        this.hanzi = hanzi;\n        this.pinyin = pinyin;\n        this.tone = tone;\n    }\n\n}","export default class ModeSelector {\n    constructor(mode) {\n        //TODO implement switching depending on mode\n        this.mode = mode;\n    }\n\n    getAnswerField(card) {\n        return card.pinyin;\n    }\n\n    getQuestionField(card) {\n        return card.hanzi;\n    }\n}\n\n\n","export default class Entry {\n    constructor(hanzi, pinyin) {\n        this.hanzi = hanzi;\n        this.pinyin = pinyin;\n    }\n\n}","import React from \"react\";\nimport Card from \"./card\";\nimport Entry from \"./entry\";\nimport './load_dialog.css';\n\nexport default function LoadDialog(props) {\n    var cardList;\n    var entryList;\n\n    function verifyAndLoad(props) {\n        if (!cardList) {\n            // TODO load HSK levels as default\n            cardList = [\n                new Card(\"水\", \"shuǐ\", \"water\"),\n                new Card(\"风\", \"fēng\", \"wind\"),\n                new Card(\"火\", \"huǒ\", \"fire\"),\n                new Card(\"土\", \"tŭ\", \"earth\")\n            ];\n            entryList = [\n                new Entry(\"我非常爱水！\", \"Wǒ fēicháng ài shuǐ!\"),\n                new Entry(\"风是一切的本质。\", \"Fēng shì yīqiè de běnzhí.\"),\n                new Entry(\"火令人着迷\", \"Huǒ lìng rén zháomí\"),\n                new Entry(\"潮湿的土壤闻起来很香。\", \"Cháoshī de tǔrǎng wén qǐlái hěn xiāng.\")\n            ];\n        }\n        props.loadData(cardList, entryList);\n    }\n\n    return (\n        <div>\n            <div className=\"load-dialog\">\n                <h1>Welcome!</h1>\n                <ImportFromFileBodyComponent onLoad={(cards, entries) => {\n                    cardList = cards;\n                    entryList = entries\n                }}></ImportFromFileBodyComponent>\n                <button className=\"load-button\" onClick={() => verifyAndLoad(props)}> Parse Pleco dictionary</button>\n            </div>\n            <div className=\"pleco-descripion\">\n                About Pleco<br/><br/>\n                It is crucial to export the Pleco database backup in the right file format. <br/><br/>\n                For doing so go to Export >> Export Cards <br/><br/>\n                Export with the following settings: <br/><br/>\n                <li>Card Selection, your choice - depends on what you want to revise</li>\n                <li>File Format, Text File</li>\n                <li>Text-Encoding, UTF8</li>\n                <li>Character set, simplified</li>\n                <li>Include Data, uncheck all fields apart from the \"Don't include examples\" field has to be checked\n                </li>\n            </div>\n        </div>\n    );\n}\n\n// Adapted from ilonacodes's blog\nconst ImportFromFileBodyComponent = (props) => {\n    let fileReader;\n    const handleFileRead = (e) => {\n        var lines = fileReader.result.split('\\n');\n        let checkForUniqueHanzi = new Set();\n        let cardList = [];\n        let entryList = [];\n\n        for (var line = 0; line < lines.length; line++) {\n            if (!lines[line]) {\n                continue;\n            }\n            const currentLine = lines[line].replace(/\\/\\/|\\.|…/g, \"\"); //TODO remove latin characters from hanzi and non-letters from pinyin\n            const fields = currentLine.split('\\t');\n\n            //1: Store complete row as entry (providing it is a word or sentence)\n            if (fields[0].length > 1) {\n                entryList.push(new Entry(fields[0], fields[1]))\n            }\n\n            //2: Split up to separate hanzi/pinyin pairs\n            const hanziList = fields[0].split(\"\");\n\n            for (var i = 0; i < hanziList.length; i++) {\n                const hanzi = hanziList[i];\n                // TODO add pinyin from pleco dict but with tones in the syllable\n                // var pinyinList = fields[1].split(/(\\d)/);\n                // pinyinList.pop();\n                // const sylables = pinyinList[i*2];\n                // const tone = pinyinList[i*2+1];\n                var pinyin = require(\"chinese-to-pinyin\");\n                const sylables = pinyin(hanzi);\n                const tone = pinyin(hanzi, {toneToNumberOnly: true});\n\n                if (hanzi && !checkForUniqueHanzi.has(hanzi)) {\n                    console.log(hanzi + \"\\t\" + sylables + \"\\t\" + tone);\n                    cardList.push(new Card(hanzi, sylables, tone));\n                    checkForUniqueHanzi.add(hanzi);\n                }\n            }\n        }\n        props.onLoad(cardList, entryList);\n    };\n\n    const handleFileChosen = (file) => {\n        fileReader = new FileReader();\n        fileReader.onloadend = handleFileRead;\n        fileReader.readAsText(file);\n    };\n\n    return <div>\n        <input type='file'\n               id='file'\n               className='input-file'\n               accept='.txt'\n               onChange={e => handleFileChosen(e.target.files[0])}\n        />\n    </div>;\n};\n\n\n","import React from \"react\";\nimport './card_detail.css';\n\nexport default function CardDetail(props) {\n    function produceList() {\n        let enumerationList = [];\n        let id = 0;\n        props.cardEntries.forEach((entry) => enumerationList.push(highlightHanzi(entry, id++)));\n        return enumerationList;\n    }\n\n    function highlightHanzi(entry, key) {\n        const toHighlight = props.questionCard.hanzi;\n        let hanziSegments = entry.hanzi.split(toHighlight);\n        let joinedSegments = [];\n        let id = 0;\n        hanziSegments.forEach((segment) => {\n                if (!segment) {\n                    joinedSegments.push(<span className=\"highlight\" key={id++}>{toHighlight}</span>);\n                } else {\n                    joinedSegments.push(<span className=\"neutral\" key={id++}>{segment}</span>);\n                    joinedSegments.push(<span className=\"highlight\" key={id++}>{toHighlight}</span>);\n                }\n            }\n        );\n        // Last split segment is not delimiter itself\n        joinedSegments.pop();\n\n        return <li key={key}>\n            <div className=\"list-row\">\n                <div className=\"enumeration\"> {key} </div>\n                <div className=\"sentence\">  {joinedSegments} </div>\n            </div>\n        </li>;\n    }\n\n    return (\n        <div className=\"card-detail\">\n            <div>Some corresponding words/sentences found in your Pleco file.</div>\n            {produceList()}\n        </div>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Card from './card.js';\nimport Mode from './mode_selector.js';\nimport LoadDialog from './load_dialog.js';\nimport CardDetail from './card_detail.js';\n\n\nfunction Tile(props) {\n    return (\n        <button className=\"tile\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    renderTile(i) {\n        return (<Tile\n            value={this.props.mode.getAnswerField(this.props.answers[i])}\n            onClick={() => this.props.onClick(i)}\n        />);\n    }\n\n    render() {\n        return (\n            <div className=\"board\">\n                <div className=\"board-row\">\n                    {this.renderTile(0)}\n                    {this.renderTile(1)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderTile(2)}\n                    {this.renderTile(3)}\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction GameStatus(props) {\n    return (\n        <button style={{background: props.status ? \"#2196F3\" : \"#FF5722\"}} className=\"game-status\"\n                onClick={props.onClick}>\n            {props.status ? \"Correct.\" : \"Try again.\"}\n        </button>\n    );\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isGame: false,\n            isRunning: false,\n            showGameStatus: false,\n            showDetails: false,\n            answerCorrect: false,\n            answers: Array(4).fill(null), //the 4 possible current answers\n            question: new Card(\"水\", \"shuǐ\", \"water\"), //the correct answer card\n            player: \"X\",\n            entries: null, //describing all parsed entries\n            mode: new Mode(null) //decides which field of the card is questioned and answered\n        }\n    }\n\n    evaluateAnswer(i) {\n        const answerCorrect = this.state.answers[i] === this.state.question;\n\n        this.setState({\n            showGameStatus: true,\n            answerCorrect: answerCorrect\n        });\n    }\n\n    shuffle(a) {\n        for (let i = a.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [a[i], a[j]] = [a[j], a[i]];\n        }\n        return a;\n    }\n\n    setUpNewRound() {\n        let answers = this.shuffle(this.state.cards.slice()).slice(0, 4);\n        let question = this.shuffle(answers.slice())[0];\n        this.setState({\n            showGameStatus: false,\n            showDetails: false,\n            isRunning: true,\n            answers: answers,\n            question: question,\n        });\n\n    }\n\n    updateEntryData(cards, entries) {\n        this.setState({\n            cards: cards,\n            entries: entries,\n            isGame: true,\n        });\n    }\n\n    render() {\n        if (!this.state.isGame) {\n            return <LoadDialog loadData={(cards, entries) => this.updateEntryData(cards, entries)}/>\n        }\n\n        if (!this.state.isRunning) {\n            return <button className=\"start-dialog\" onClick={() => this.setUpNewRound()}>Click to start</button>;\n        }\n\n        return (\n            <div>\n                <h1 className=\"game-title\">Chinese characters game</h1>\n                <div className=\"question-bar\"> How is the character pronounced? <br/>\n                    <span onClick={() => this.setState({showDetails: true})}\n                          id=\"question-highlight\"> {this.state.mode.getQuestionField(this.state.question)}  </span>\n                </div>\n                <div className=\"game\">\n                    <div className=\"game-board\">\n                        <Board\n                            mode={this.state.mode}\n                            answers={this.state.answers}\n                            onClick={(i) => this.evaluateAnswer(i)}\n                        />\n                    </div>\n                </div>\n                {this.state.showDetails ? <CardDetail questionCard={this.state.question}\n                                                      cardEntries={this.getEntriesAssociatedWithCard(this.state.question)}\n                                                      onClick={() => this.showDetails()}/> : null}\n                {this.state.showGameStatus ?\n                    <GameStatus status={this.state.answerCorrect} onClick={() => this.setUpNewRound()}/> : null}\n            </div>\n        );\n    }\n\n    getEntriesAssociatedWithCard(card) {\n        let entries = [];\n        this.state.entries.forEach((entry) => {\n                if (entry.hanzi.includes(card.hanzi)) {\n                    console.log(entry.hanzi);\n                    entries.push(entry);\n                }\n            }\n        );\n        return entries;\n    }\n}\n\n\n// ========================================\nReactDOM.render(\n    <div className=\"content\"><Game/></div>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}