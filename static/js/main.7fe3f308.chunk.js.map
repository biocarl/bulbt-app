{"version":3,"sources":["entry.js","mode_selector.js","load_dialog.js","index.js"],"names":["Entry","hanzi","pinyin","tone","this","ModeSelector","mode","card","LoadDialog","props","entryList","className","onLoad","entries","onClick","loadData","verifyAndLoad","ImportFromFileBodyComponent","fileReader","handleFileRead","e","lines","result","split","checkForUniqueHanzi","Set","line","length","hanziList","replace","i","require","sylables","toneToNumberOnly","has","console","log","push","add","type","id","accept","onChange","file","target","files","FileReader","onloadend","readAsText","Tile","value","Board","getAnswerField","answers","renderTile","React","Component","GameStatus","style","background","status","Game","state","isGame","isRunning","showGameStatus","answerCorrect","Array","fill","question","player","Mode","setState","a","j","Math","floor","random","shuffle","slice","getQuestionField","evaluateAnswer","setUpNewRound","updateEntryData","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7fe3f308.chunk.js","sourcesContent":["export default class Entry {\n    constructor(hanzi, pinyin, tone) {\n        this.hanzi = hanzi;\n        this.pinyin = pinyin;\n        this.tone = tone;\n    }\n\n}","export default class ModeSelector {\n    constructor(mode) {\n        //TODO implement switching depending on mode\n        this.mode = mode;\n    }\n\n    getAnswerField(card) {\n        return card.pinyin;\n    }\n\n    getQuestionField(card) {\n        return card.hanzi;\n    }\n}\n\n\n","import React from \"react\";\nimport Entry from \"./entry\";\n\nexport default function LoadDialog(props) {\n    var entryList;\n\n    function verifyAndLoad(props) {\n        if(!entryList) {\n            // TODO load HSK levels as default\n            entryList = [\n                new Entry(\"水\", \"shuǐ\", \"water\"),\n                new Entry(\"风\", \"fēng\", \"wind\"),\n                new Entry(\"火\", \"huǒ\", \"fire\"),\n                new Entry(\"土\", \"tŭ\", \"earth\")\n            ];\n        }\n        props.loadData(entryList);\n    }\n\n    return (\n        <div className=\"load-dialog\">\n            <h1>Welcome!</h1>\n            <ImportFromFileBodyComponent onLoad={(entries) => entryList = entries}></ImportFromFileBodyComponent>\n            <button className=\"load-button\" onClick={() => verifyAndLoad(props)}> Parse Pleco dictionary</button>\n        </div>);\n}\n\n// Adapted from ilonacodes's blog\nconst ImportFromFileBodyComponent = (props) => {\n    let fileReader;\n    const handleFileRead = (e) => {\n        var lines = fileReader.result.split('\\n');\n        let checkForUniqueHanzi = new Set();\n        let entryList = [];\n\n        for (var line = 0; line < lines.length; line++) {\n            if (!lines[line]) {\n                continue;\n            }\n            const currentLine = lines[line].replace(/\\/\\/|\\.|…/g, \"\"); //TODO remove latin characters from hanzi and non-letters from pinyin\n            const fields = currentLine.split('\\t');\n            const hanziList = fields[0].split(\"\");\n\n            for (var i = 0; i < hanziList.length; i++) {\n                const hanzi = hanziList[i];\n                // TODO add pinyin from pleco dict but with tones in the syllable\n                // var pinyinList = fields[1].split(/(\\d)/);\n                // pinyinList.pop();\n                // const sylables = pinyinList[i*2];\n                // const tone = pinyinList[i*2+1];\n                var pinyin = require(\"chinese-to-pinyin\")\n                const sylables = pinyin(hanzi);\n                const tone = pinyin(hanzi, {toneToNumberOnly: true});\n\n                if (hanzi && !checkForUniqueHanzi.has(hanzi)) {\n                    console.log(hanzi + \"\\t\" + sylables + \"\\t\" + tone);\n                    entryList.push(new Entry(hanzi, sylables, tone));\n                    checkForUniqueHanzi.add(hanzi);\n                }\n            }\n        }\n        props.onLoad(entryList);\n    };\n\n    const handleFileChosen = (file) => {\n        fileReader = new FileReader();\n        fileReader.onloadend = handleFileRead;\n        fileReader.readAsText(file);\n    };\n\n    return <div>\n        <input type='file'\n               id='file'\n               className='input-file'\n               accept='.txt'\n               onChange={e => handleFileChosen(e.target.files[0])}\n        />\n    </div>;\n};\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Entry from './entry.js';\nimport Mode from './mode_selector.js';\nimport LoadDialog from './load_dialog.js';\n\n\nfunction Tile(props) {\n    return (\n        <button className=\"tile\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    renderTile(i) {\n        return (<Tile\n            value={this.props.mode.getAnswerField(this.props.answers[i])}\n            onClick={() => this.props.onClick(i)}\n        />);\n    }\n\n    render() {\n        return (\n            <div className=\"board\">\n                <div className=\"board-row\">\n                    {this.renderTile(0)}\n                    {this.renderTile(1)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderTile(2)}\n                    {this.renderTile(3)}\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction GameStatus(props) {\n    return (\n        <button style={{background: props.status ? \"#2196F3\" : \"#FF5722\"}} className=\"game-status\"\n                onClick={props.onClick}>\n            {props.status ? \"Correct.\" : \"Try again.\"}\n        </button>\n    );\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isGame: false,\n            isRunning: false,\n            showGameStatus: false,\n            answerCorrect: false,\n            answers: Array(4).fill(null), //the 4 possible current answers\n            question: new Entry(\"水\", \"shuǐ\", \"water\"), //the correct answer card\n            player: \"X\",\n            entries: null, //describing all parsed entries\n            mode: new Mode(null) //decides which field of the entry is questioned and answered\n        }\n    }\n\n    evaluateAnswer(i) {\n        const answerCorrect = this.state.answers[i] === this.state.question;\n\n        this.setState({\n            showGameStatus: true,\n            answerCorrect: answerCorrect\n        });\n    }\n\n    shuffle(a) {\n        for (let i = a.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [a[i], a[j]] = [a[j], a[i]];\n        }\n        return a;\n    }\n\n    setUpNewRound() {\n        let answers = this.shuffle(this.state.entries.slice()).slice(0, 4);\n        let question = this.shuffle(answers.slice())[0];\n        this.setState({\n            showGameStatus: false,\n            isRunning: true,\n            answers: answers,\n            question: question,\n        });\n\n    }\n\n    updateEntryData(entries) {\n        this.setState({\n            entries: entries,\n            isGame: true,\n        });\n    }\n\n    render() {\n        if (!this.state.isGame) {\n            return <LoadDialog loadData={(entries) => this.updateEntryData(entries)}/>\n        }\n\n        if (!this.state.isRunning) {\n            return <button className=\"start-dialog\" onClick={() => this.setUpNewRound()}>Click to start</button>;\n        }\n\n        return (\n            <div>\n                <h1 className=\"game-title\">Chinese characters game</h1>\n                <div className=\"question-bar\"> How is the character pronounced? <br/> <span\n                    id=\"question-highlight\"> {this.state.mode.getQuestionField(this.state.question)}  </span>\n                </div>\n                <div className=\"game\">\n                    <div className=\"game-board\">\n                        <Board\n                            mode={this.state.mode}\n                            answers={this.state.answers}\n                            onClick={(i) => this.evaluateAnswer(i)}\n                        />\n\n                        {this.state.showGameStatus ? <GameStatus\n                            status={this.state.answerCorrect}\n                            onClick={() => this.setUpNewRound()}\n                        /> : null}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\n// ========================================\nReactDOM.render(\n    <div className=\"content\"><Game/></div>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}